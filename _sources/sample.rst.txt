Carts API
=========

These endpoints will allow you to easily manage cart and cart items. Base URI is `/api/v1/carts/`.

.. note::

    Remember that a **Cart** in Sylius is an **Order** in the state ``cart``.

    If you don't understand the difference between Cart and Order concepts in Sylius yet, please read :doc:`this article </book/orders/orders>` carefully.

Cart API response structure
----------------------------

If you request a cart via API, you will receive an object with the following fields:

+-------------------+---------------------------------------------------------------------------------------+
| Field             | Description                                                                           |
+===================+=======================================================================================+
| id                | Id of the cart                                                                        |
+-------------------+---------------------------------------------------------------------------------------+
| items             | List of items in the cart                                                             |
+-------------------+---------------------------------------------------------------------------------------+
| itemsTotal        | Sum of all items prices                                                               |
+-------------------+---------------------------------------------------------------------------------------+
| adjustments       | List of adjustments related to the cart                                               |
+-------------------+---------------------------------------------------------------------------------------+
| adjustmentsTotal  | Sum of all cart adjustments values                                                    |
+-------------------+---------------------------------------------------------------------------------------+
| total             | Sum of items total and adjustments total                                              |
+-------------------+---------------------------------------------------------------------------------------+
| customer          | :doc:`The customer object serialized with the default data </api/customers>` for cart |
+-------------------+---------------------------------------------------------------------------------------+
| channel           | :doc:`The channel object serialized with the default data </api/channels>`            |
+-------------------+---------------------------------------------------------------------------------------+
| currencyCode      | Currency of the cart                                                                  |
+-------------------+---------------------------------------------------------------------------------------+
| localeCode        | Locale of the cart                                                                    |
+-------------------+---------------------------------------------------------------------------------------+
| checkoutState     | State of the checkout process of the cart                                             |
+-------------------+---------------------------------------------------------------------------------------+

Example
^^^^^^^

To create a new cart for the ``shop@example.com`` user in the ``US_WEB`` channel with the ``en_US`` locale use the below method:

.. warning::

    Remember, that it doesn't replicate the environment of shop usage. It is more like an admin part of cart creation, which will allow you to manage
    the cart from the admin perspective. ShopAPI is still an experimental concept.

.. code-block:: bash

    $ curl http://demo.sylius.org/api/v1/carts/ \
        -H "Authorization: Bearer SampleToken" \
        -H "Content-Type: application/json" \
        -X POST \
        --data '
            {
                "customer": "shop@example.com",
                "channel": "US_WEB",
                "localeCode": "en_US"
            }
        '

Exemplary Response
^^^^^^^^^^^^^^^^^^

.. code-block:: text

    STATUS: 201 Created

.. code-block:: json

    {
        "id":21,
        "items":[

        ],
        "itemsTotal":0,
        "adjustments":[

        ],
        "adjustmentsTotal":0,
        "total":0,
        "customer":{
            "id":1,
            "email":"shop@example.com",
            "firstName":"John",
            "lastName":"Doe",
            "user":{
                "id":1,
                "username":"shop@example.com",
                "usernameCanonical":"shop@example.com"
            },
            "_links":{
                "self":{
                    "href":"\/api\/v1\/customers\/1"
                }
            }
        },
        "channel":{
            "code":"US_WEB",
            "_links":{
                "self":{
                    "href":"\/api\/v1\/channels\/US_WEB"
                }
            }
        },
        "currencyCode":"USD",z
        "localeCode":"en_US",
        "checkoutState":"cart"
    }

.. tip::

    In Sylius the prices are stored as an integers (``1059`` represents ``10.59$``).
    So in order to present a proper amount to the end user, you should divide price by 100 by default.

Updating a Cart Item
--------------------

To change the quantity of a cart item you will need to call the ``/api/v1/carts/{cartId}/items/{cartItemId}`` endpoint with the ``PUT`` or ``PATCH`` method.

.. ipython:: python

    # array summary : dimensions + description of axes
    arr.info

    # number of dimensions
    arr.ndim

    # array dimensions
    arr.shape

    # number of elements
    arr.size

    # size in memory
    arr.memory_used

    # type of the data of the array
    arr.dtype

Arrays can be generated through dedicated functions:

* :py:func:`zeros` : fills an array with 0
* :py:func:`ones` : fills an array with 1
* :py:func:`full` : fills an array with a given
* :py:func:`eye` : identity matrix
* :py:func:`ndrange` : fills an array with increasing numbers (mostly for testing)
* :py:func:`ndtest` : same as ndrange but with axes generated automatically (for testing)
* :py:func:`sequence` : creates an array by sequentially applying modifications to the array along axis.

.. ipython:: python

    arr_3D = ndtest((2, 2, 2))
    arr_3D

    arr_3D.to_csv('arr_3D.csv')

Content of 'arr_3D.csv' file is ::

  a,b\c,c0,c1
  a0,b0,0,1
  a0,b1,2,3
  a1,b0,4,5
  a1,b1,6,7

.. ipython:: python
    :verbatim:

    from larray_editor import *

    # shows the arrays of a given session in a graphical user interface
    view(ses)

    # the session may be directly loaded from a file
    view("my_session.h5")

    # creates a session with all existing arrays from the current namespace
    # and shows its content
    view()

To open the user interface in edit mode, call :py:func:`edit` instead.

.. image:: _static/editor.png
    :align: center

Once open, you can save and load any session using the `File` menu.

Finally, you can also visually compare two arrays or sessions using the :py:func:`compare` function.

.. ipython:: python
   :verbatim:

    arr0 = ndtest((3, 3))
    arr1 = ndtest((3, 3))
    arr1[["a1", "a2"]] = -arr1[["a1", "a2"]]
    compare(arr0, arr1)

.. image:: _static/compare.png
    :align: center

In case of two arrays, they must have compatible axes.

For Windows Users
^^^^^^^^^^^^^^^^^

Installing the ``larray-editor`` package on Windows will create a ``LArray`` menu in the
Windows Start Menu. This menu contains:

  * a shortcut to open the documentation of the last stable version of the library
  * a shortcut to open the graphical interface in edit mode.
  * a shortcut to update `larrayenv`.

.. image:: _static/menu_windows.png
    :align: center

.. code-block:: python3

    from django.db import models
    
    class Category(models.Model):
        name = models.CharField("카테고리명", max_length=32, unique=True)

.. code-block:: python3

    from django.utils.translation import ugettext_lazy as _

    from apps.manager import Custom404

    raise Custom404(_("존재하지 않는 게시글입니다."))


서비스 권한
~~~~~~~~~~~

**Manager** 앱이 필요한 가장 큰 이유는 **권한 관리** 때문입니다.
기본적으로 **KAIST USC** 프로젝트는 각 서비스에 대한 권한을 아래 7가지 중 하나로 나타냅니다. (:mod:`apps.manager.constants` 에 위치)

- 권한없음
- 접근권한
- 읽기권한
- 댓글권한
- 쓰기권한
- 수정권한
- 삭제권한


- 이름 (:attr:`ku_kname`)
- 고유번호(UID) (:attr:`kaist_uid`)
- 학위과정 (:attr:`ku_acad_prog`)
- 학번 (:attr:`ku_std_no`)
- 학적상태 (:attr:`ku_psft_user_status_kor`)
- 생년월일 (:attr:`ku_born_date`)
- 성별 (:attr:`ku_sex`)
- 학과 (:attr:`ou`)
- 메일주소 (:attr:`mail`)
- 전화번호 (:attr:`mobile`)


프로젝트 기술 스택
-----------------------------------------------

**배포환경**

- Docker_
- Ubuntu_ 16.04
- MySQL_ 5.7
- Nginx_

**백엔드**

- Python_ 3.6
- uWSGI_ 2.0
- Django_ 1.10

**프론트엔드**

- Jinja_ 2.9
- jQuery_ 3.1
- `Bootstrap for Sass`_ 3.3
- `Font Awesome`_ 4.7

**기타**

- npm_, Gulp_, Bower_, Sphinx_


기여자 목록
-----------------------------------------------

- **박항** <hangpark@kaist.ac.kr> - 프로그래밍, 문서화
- **박병훈** - 웹디자인
- **권용석** - 웹디자인

.. _Docker: https://www.docker.com/
.. _Ubuntu:
.. _MySQL: https://www.mysql.com/
.. _Nginx: https://www.nginx.com/resources/wiki/
.. _Python:
.. _uWSGI: https://uwsgi-docs.readthedocs.io/en/latest/
.. _Django: https://djangoproject.com/
.. _Jinja: http://jinja.pocoo.org/docs/2.9/
.. _jQuery: https://jquery.com/
.. _`Bootstrap for Sass`: https://github.com/twbs/bootstrap-sass/
.. _`Font Awesome`: http://fontawesome.io/
.. _npm: https://npmjs.com/
.. _Gulp: http://gulpjs.com/
.. _Bower: https://bower.io/
.. _Sphinx: http://www.sphinx-doc.org/en/stable/
